// <auto-generated />
using System;
using ERPv1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ERPv1.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201223194813_UpdateForPayroll")]
    partial class UpdateForPayroll
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CRM.Model.ContactBalanceInCurrency", b =>
                {
                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("AccNum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ContactId", "CurrencyId", "AccNum");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CRM_ContactBalanceInCurrency");
                });

            modelBuilder.Entity("ERPv1.CRM.Model.Contacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientAccNum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("ClientBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsClient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupplier")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SupplierAccNum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("SupplierBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaxationCard")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ClientAccNum");

                    b.HasIndex("SupplierAccNum");

                    b.ToTable("CRM_Contacts");
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.ChecksModule.Model.Check", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountForgin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountLocal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankAccNum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CheckLocationId")
                        .HasColumnType("int");

                    b.Property<int>("CheckStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ChkNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("Date");

                    b.Property<int?>("HafzaId")
                        .HasColumnType("int");

                    b.Property<string>("OrginalBank")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnPaid")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccNum");

                    b.HasIndex("CheckLocationId");

                    b.HasIndex("CheckStatusId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("HafzaId");

                    b.ToTable("Finance_CurrentAsset_Checks");
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.ChecksModule.Model.CheckHafza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAccNum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("HafzaDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HafzaName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Finance_CurrentAsset_CheckHafza");
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.ChecksModule.Model.CheckHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChkNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransID")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Finance_CurrentAsset_Checks_History");
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.ChecksModule.Model.CheckLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckLocationAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CheckLocationEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDefualt")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Finance_CurrentAsset_CheckLocation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheckLocationAR = "الخزنة",
                            CheckLocationEN = "Safe",
                            IsDefualt = true
                        },
                        new
                        {
                            Id = 2,
                            CheckLocationAR = "البنك",
                            CheckLocationEN = "Bank",
                            IsDefualt = false
                        },
                        new
                        {
                            Id = 3,
                            CheckLocationAR = "محصل",
                            CheckLocationEN = "BankCollected",
                            IsDefualt = false
                        },
                        new
                        {
                            Id = 4,
                            CheckLocationAR = "مع العميل",
                            CheckLocationEN = "Client",
                            IsDefualt = false
                        });
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.ChecksModule.Model.CheckStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckStatusAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CheckStatusEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Finance_CurrentAsset_CheckStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheckStatusAR = "تحت التحصيل",
                            CheckStatusEN = "Under Collection",
                            IsDefault = true
                        },
                        new
                        {
                            Id = 2,
                            CheckStatusAR = "محصل",
                            CheckStatusEN = "Collected",
                            IsDefault = true
                        },
                        new
                        {
                            Id = 3,
                            CheckStatusAR = "مرتد",
                            CheckStatusEN = "Bounced",
                            IsDefault = true
                        });
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Main.StoreItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseAccNum")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StoreAccNum")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StoreSystem")
                        .HasColumnType("int");

                    b.Property<int>("UnitMeasureId")
                        .HasColumnType("int");

                    b.Property<bool>("WithSN")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("PurchaseAccNum");

                    b.HasIndex("StoreAccNum");

                    b.HasIndex("UnitMeasureId");

                    b.ToTable("Finance_CurrentAsset_Inventory_Main_StoreItem");
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Main.StoreItemBalanceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("Date");

                    b.Property<int>("StoreItemId")
                        .HasColumnType("int");

                    b.Property<int>("StoreTransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreItemId");

                    b.HasIndex("StoreTransactionId");

                    b.ToTable("Finance_CurrentAsset_Inventory_Main_StoreItemBalanceDetails");
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Main.StoreItemWithSN", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreItemId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreItemId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Finance_CurrentAsset_Inventory_Main_StoreItemWithSN");
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Main.StoreTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InvoiceNum")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QtyBalanceAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StoreItemId")
                        .HasColumnType("int");

                    b.Property<int>("StoreTransType")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceNum");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("StoreItemId");

                    b.ToTable("Finance_CurrentAsset_Inventory_Main_StoreTransaction");
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Settings.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Finance_CurrentAsset_Inventory_Settings_Brand");
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Settings.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Finance_CurrentAsset_Inventory_Settings_ProductType");
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Settings.UnitMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Finance_CurrentAsset_Inventory_Settings_UnitMeasure");
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentLiabilitiesModules.NotesPayableModule.Model.NotesPayable", b =>
                {
                    b.Property<string>("ChkNum")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<decimal>("AmountForgin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountLocal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankAccountNum")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CheckStatus")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("WritingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChkNum");

                    b.HasIndex("BankAccountNum");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Finance_CurrentLiabilties_NP_NotesPayable");
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentLiabilitiesModules.NotesPayableModule.Model.NotesPayableTransactionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChkNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StatusAfterAction")
                        .HasColumnType("int");

                    b.Property<string>("TransId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChkNum");

                    b.ToTable("Finance_CurrentLiabilties_NP_NotesPayableTransactionHistory");
                });

            modelBuilder.Entity("ERPv1.ERP.ERPSettings.Model.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Finance_Settings_Branch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Main"
                        });
                });

            modelBuilder.Entity("ERPv1.ERP.ERPSettings.Model.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencyAbbrev")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("CurrencyNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Finance_Settings_Currency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrencyAbbrev = "EGP",
                            CurrencyName = "Egyptain Pound",
                            CurrencyNameAr = "جنية مصر",
                            IsDefault = true,
                            Rate = 1m
                        },
                        new
                        {
                            Id = 2,
                            CurrencyAbbrev = "USD",
                            CurrencyName = "American Dollar",
                            CurrencyNameAr = "دولار أمريكي",
                            IsDefault = false,
                            Rate = 16.00m
                        });
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChart", b =>
                {
                    b.Property<string>("AccNum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("AccTypeId")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("AccountNameAr")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("AccountNature")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit");

                    b.Property<string>("ParentAcNum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("StartingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AccNum");

                    b.HasIndex("AccTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Finance_GL_AccountChart");

                    b.HasData(
                        new
                        {
                            AccNum = "1110000000",
                            AccTypeId = 1,
                            AccountName = "Buildings",
                            AccountNameAr = "مباني",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1120000000",
                            AccTypeId = 2,
                            AccountName = "Machines And Equipments",
                            AccountNameAr = "أجهزة و معدات",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1130000000",
                            AccTypeId = 3,
                            AccountName = "Furnitiures",
                            AccountNameAr = "أثاث",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1210000000",
                            AccTypeId = 4,
                            AccountName = "Safes",
                            AccountNameAr = "خزن",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1220000000",
                            AccTypeId = 5,
                            AccountName = "Banks",
                            AccountNameAr = "بنوك",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1230000000",
                            AccTypeId = 6,
                            AccountName = "Clients",
                            AccountNameAr = "عملاء",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1230000001",
                            AccTypeId = 6,
                            AccountName = "Clients",
                            AccountNameAr = "عملاء",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "1230000000",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1240000000",
                            AccTypeId = 7,
                            AccountName = "Checks",
                            AccountNameAr = "شيكات",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1240000001",
                            AccTypeId = 7,
                            AccountName = "Checks In Safe",
                            AccountNameAr = "شيكات في الخزنة",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = false,
                            ParentAcNum = "1240000000",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1240000002",
                            AccTypeId = 7,
                            AccountName = "Checks In Bank",
                            AccountNameAr = "شيكات في البنك",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = false,
                            ParentAcNum = "1240000000",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1240000003",
                            AccTypeId = 7,
                            AccountName = "Bounced Checks",
                            AccountNameAr = "شيكات مرتدة",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = false,
                            ParentAcNum = "1240000000",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1250000000",
                            AccTypeId = 8,
                            AccountName = "Store",
                            AccountNameAr = "مخزن",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1261000000",
                            AccTypeId = 9,
                            AccountName = "Custody",
                            AccountNameAr = "عهد",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1262000000",
                            AccTypeId = 10,
                            AccountName = "StaffAdvances",
                            AccountNameAr = "سلف",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1263000000",
                            AccTypeId = 11,
                            AccountName = "Suppliers Advances",
                            AccountNameAr = "دفعات مقدمة للموردين",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1269000000",
                            AccTypeId = 12,
                            AccountName = "OtherCurrentAsset",
                            AccountNameAr = "أصول متداولة أخري",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2170000000",
                            AccTypeId = 13,
                            AccountName = "NotePayable",
                            AccountNameAr = "شيكات موردين",
                            AccountNature = 1,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2170000001",
                            AccTypeId = 13,
                            AccountName = "NotePayable",
                            AccountNameAr = "شيكات موردين",
                            AccountNature = 1,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = false,
                            IsParent = true,
                            ParentAcNum = "2170000000",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2210000000",
                            AccTypeId = 14,
                            AccountName = "Suppliers",
                            AccountNameAr = "موردين",
                            AccountNature = 1,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2220000000",
                            AccTypeId = 15,
                            AccountName = "Taxes",
                            AccountNameAr = "ضرائب",
                            AccountNature = 1,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2230000000",
                            AccTypeId = 16,
                            AccountName = "Creditors",
                            AccountNameAr = "دائنون",
                            AccountNature = 1,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2240000000",
                            AccTypeId = 17,
                            AccountName = "Accrued Expenses",
                            AccountNameAr = "مصروفات مستحقة",
                            AccountNature = 1,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2250000000",
                            AccTypeId = 18,
                            AccountName = "Advances Income",
                            AccountNameAr = "ايرادات مقدمة",
                            AccountNature = 1,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2250000001",
                            AccTypeId = 18,
                            AccountName = "Advances Income",
                            AccountNameAr = "ايرادات مقدمة",
                            AccountNature = 1,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = false,
                            IsParent = true,
                            ParentAcNum = "2250000000",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2260000000",
                            AccTypeId = 24,
                            AccountName = "Other Current Liabilities",
                            AccountNameAr = "التزمات متداولة أخري",
                            AccountNature = 1,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "3110000000",
                            AccTypeId = 19,
                            AccountName = "Incomes",
                            AccountNameAr = "إيرادات",
                            AccountNature = 1,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "4111000000",
                            AccTypeId = 20,
                            AccountName = "Expenses",
                            AccountNameAr = "مصروفات",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "4112000000",
                            AccTypeId = 21,
                            AccountName = "Purchases",
                            AccountNameAr = "مشتريات",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "5110000000",
                            AccTypeId = 22,
                            AccountName = "Capital",
                            AccountNameAr = "رأس المال",
                            AccountNature = 1,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "5120000000",
                            AccTypeId = 23,
                            AccountName = "WithDrawls",
                            AccountNameAr = "مسحوبات",
                            AccountNature = 1,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        });
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChartCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountCategory")
                        .HasColumnType("int");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("BalanceSheet")
                        .HasColumnType("bit");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("IncomeStatement")
                        .HasColumnType("bit");

                    b.Property<string>("ParentAccNum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Finance_GL_AccountChartCounter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountCategory = 10,
                            AccountType = "Buildings",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1110000000"
                        },
                        new
                        {
                            Id = 2,
                            AccountCategory = 10,
                            AccountType = "Machines And Equipments",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1120000000"
                        },
                        new
                        {
                            Id = 3,
                            AccountCategory = 10,
                            AccountType = "Furnitiures",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1130000000"
                        },
                        new
                        {
                            Id = 4,
                            AccountCategory = 20,
                            AccountType = "Safe",
                            BalanceSheet = true,
                            Count = 1,
                            IncomeStatement = false,
                            ParentAccNum = "1210000000"
                        },
                        new
                        {
                            Id = 5,
                            AccountCategory = 20,
                            AccountType = "Bank",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1220000000"
                        },
                        new
                        {
                            Id = 6,
                            AccountCategory = 20,
                            AccountType = "Client",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1230000000"
                        },
                        new
                        {
                            Id = 7,
                            AccountCategory = 20,
                            AccountType = "Check",
                            BalanceSheet = true,
                            Count = 3,
                            IncomeStatement = false,
                            ParentAccNum = "1240000000"
                        },
                        new
                        {
                            Id = 8,
                            AccountCategory = 20,
                            AccountType = "Store",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1250000000"
                        },
                        new
                        {
                            Id = 9,
                            AccountCategory = 20,
                            AccountType = "Custody",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1261000000"
                        },
                        new
                        {
                            Id = 10,
                            AccountCategory = 20,
                            AccountType = "StaffAdvances",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1262000000"
                        },
                        new
                        {
                            Id = 11,
                            AccountCategory = 20,
                            AccountType = "SupplierAdvances",
                            BalanceSheet = false,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1263000000"
                        },
                        new
                        {
                            Id = 12,
                            AccountCategory = 20,
                            AccountType = "OtherCurrentAsset",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1269000000"
                        },
                        new
                        {
                            Id = 13,
                            AccountCategory = 40,
                            AccountType = "NotePayable",
                            BalanceSheet = true,
                            Count = 1,
                            IncomeStatement = false,
                            ParentAccNum = "2170000000"
                        },
                        new
                        {
                            Id = 14,
                            AccountCategory = 40,
                            AccountType = "Suppliers",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "2210000000"
                        },
                        new
                        {
                            Id = 15,
                            AccountCategory = 40,
                            AccountType = "Taxes",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "2220000000"
                        },
                        new
                        {
                            Id = 16,
                            AccountCategory = 40,
                            AccountType = "Creditors",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "2230000000"
                        },
                        new
                        {
                            Id = 17,
                            AccountCategory = 40,
                            AccountType = "Accrued Expenses",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "2240000000"
                        },
                        new
                        {
                            Id = 18,
                            AccountCategory = 40,
                            AccountType = "Advances Income",
                            BalanceSheet = true,
                            Count = 1,
                            IncomeStatement = false,
                            ParentAccNum = "2250000000"
                        },
                        new
                        {
                            Id = 19,
                            AccountCategory = 60,
                            AccountType = "Income",
                            BalanceSheet = false,
                            Count = 0,
                            IncomeStatement = true,
                            ParentAccNum = "3110000000"
                        },
                        new
                        {
                            Id = 20,
                            AccountCategory = 70,
                            AccountType = "Expense",
                            BalanceSheet = false,
                            Count = 0,
                            IncomeStatement = true,
                            ParentAccNum = "4111000000"
                        },
                        new
                        {
                            Id = 21,
                            AccountCategory = 80,
                            AccountType = "Purchases",
                            BalanceSheet = false,
                            Count = 0,
                            IncomeStatement = true,
                            ParentAccNum = "4112000000"
                        },
                        new
                        {
                            Id = 22,
                            AccountCategory = 50,
                            AccountType = "Owners",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "5110000000"
                        },
                        new
                        {
                            Id = 23,
                            AccountCategory = 50,
                            AccountType = "OwnerWithdraw",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "5120000000"
                        },
                        new
                        {
                            Id = 24,
                            AccountCategory = 40,
                            AccountType = "OtherCurrentLiabilties",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "2260000000"
                        });
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.FiniacialPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Finance_GL_FiniacialPeriod");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            YearName = "2020-2021"
                        });
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.HistoricalBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AccountDetailsAccNum")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FinancialPeriodId")
                        .HasColumnType("int");

                    b.Property<decimal>("UsedRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsAccNum");

                    b.HasIndex("FinancialPeriodId");

                    b.ToTable("Finance_GL_HistoricalBalance");
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.JournalModeule.Model.Journal", b =>
                {
                    b.Property<string>("TransId")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("DocName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EntryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SystemModule")
                        .HasColumnType("int");

                    b.Property<int>("TransCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("Date");

                    b.Property<string>("TransDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransId");

                    b.ToTable("Finance_GL_Journal");
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.JournalModeule.Model.JournalDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccNum")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountLocal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<string>("TransId")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<decimal>("UsedRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TransId");

                    b.ToTable("Finance_GL_JournalDetails");
                });

            modelBuilder.Entity("ERPv1.ERP.PurchasesModule.Model.ExpenseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccNum")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExpenseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccNum");

                    b.HasIndex("ExpenseTypeId");

                    b.ToTable("Finance_Expense_ExpenseItem");
                });

            modelBuilder.Entity("ERPv1.ERP.PurchasesModule.Model.ExpenseSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("LocalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ExpenseItemId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Finance_Expense_ExpenseSummary");
                });

            modelBuilder.Entity("ERPv1.ERP.PurchasesModule.Model.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExpenseTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("Finance_Expense_ExpenseType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpenseTypeName = "Managment Expenses"
                        },
                        new
                        {
                            Id = 2,
                            ExpenseTypeName = "Banking Expenses"
                        });
                });

            modelBuilder.Entity("ERPv1.ERP.PurchasesModule.Model.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFullyPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVAT")
                        .HasColumnType("bit");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("Date");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmountWithVAT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VATAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Finance_Supplier_Purchase");
                });

            modelBuilder.Entity("ERPv1.ERP.PurchasesModule.Model.SupplierTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentAccNum")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("Date");

                    b.Property<int>("PaymentMenthod")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TransId")
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentAccNum");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TransId");

                    b.ToTable("Finance_Supplier_SupplierTransaction");
                });

            modelBuilder.Entity("ERPv1.ERP.SalesModule.Model.ClientTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNum")
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("PaymentAccNum")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("Date");

                    b.Property<int>("PaymentMenthod")
                        .HasColumnType("int");

                    b.Property<string>("TransId")
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("InvoiceNum");

                    b.HasIndex("PaymentAccNum");

                    b.HasIndex("TransId");

                    b.ToTable("Finance_Sales_ClientTransaction");
                });

            modelBuilder.Entity("ERPv1.ERP.SalesModule.Model.Invoices", b =>
                {
                    b.Property<string>("InoviceNum")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ContactDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("Date");

                    b.Property<bool>("IsVAT")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalWithVAT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VATAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InoviceNum");

                    b.HasIndex("ContactDetailsId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Finance_Sales_Invoices");
                });

            modelBuilder.Entity("ERPv1.HR.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("HR_Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentName = "IT"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentName = "HR"
                        });
                });

            modelBuilder.Entity("ERPv1.HR.Model.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("InsuranceSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("HR_Employee");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasicSalary = 5000m,
                            DepartmentId = 1,
                            InsuranceSalary = 2500m,
                            Name = "Ahmed",
                            Phone = "0124558880",
                            Title = "HR Manager"
                        },
                        new
                        {
                            Id = 2,
                            BasicSalary = 10000m,
                            DepartmentId = 2,
                            InsuranceSalary = 6000m,
                            Name = "Mohamed",
                            Phone = "0124558881",
                            Title = "IT Manager"
                        },
                        new
                        {
                            Id = 3,
                            BasicSalary = 20000m,
                            DepartmentId = 3,
                            InsuranceSalary = 7000m,
                            Name = "Peter",
                            Phone = "0124558882",
                            Title = "Finance Manager"
                        });
                });

            modelBuilder.Entity("ERPv1.HR.Model.SalaryBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchMonth")
                        .HasColumnType("int");

                    b.Property<int>("BatchYear")
                        .HasColumnType("int");

                    b.Property<string>("TransId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HR_SalaryBatch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BatchMonth = 12,
                            BatchYear = 2020
                        });
                });

            modelBuilder.Entity("ERPv1.HR.Model.SalaryDetails", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<decimal>("Allowonces")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Commision")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrossIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InsuranceEmployee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InsuranceEmployer")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Overtime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Penalties")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StaffAdvance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDeductions")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("EmployeeId", "BatchId");

                    b.HasIndex("BatchId");

                    b.ToTable("HR_SalaryDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CRM.Model.ContactBalanceInCurrency", b =>
                {
                    b.HasOne("ERPv1.CRM.Model.Contacts", "Contacts")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.ERPSettings.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPv1.CRM.Model.Contacts", b =>
                {
                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChart", "ClientAccountDetails")
                        .WithMany()
                        .HasForeignKey("ClientAccNum");

                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChart", "SupplierAccountDetails")
                        .WithMany()
                        .HasForeignKey("SupplierAccNum");
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.ChecksModule.Model.Check", b =>
                {
                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChart", "BankAcc")
                        .WithMany()
                        .HasForeignKey("BankAccNum");

                    b.HasOne("ERPv1.ERP.CurrentAssetModules.ChecksModule.Model.CheckLocation", "CheckLocation")
                        .WithMany()
                        .HasForeignKey("CheckLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.CurrentAssetModules.ChecksModule.Model.CheckStatus", "CheckStatus")
                        .WithMany()
                        .HasForeignKey("CheckStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.CRM.Model.Contacts", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.ERPSettings.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.CurrentAssetModules.ChecksModule.Model.CheckHafza", "CheckHafza")
                        .WithMany()
                        .HasForeignKey("HafzaId");
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Main.StoreItem", b =>
                {
                    b.HasOne("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Settings.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Settings.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChart", "PurchseAccDetials")
                        .WithMany()
                        .HasForeignKey("PurchaseAccNum");

                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChart", "StoreAccDetails")
                        .WithMany()
                        .HasForeignKey("StoreAccNum");

                    b.HasOne("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Settings.UnitMeasure", "UnitMeasure")
                        .WithMany()
                        .HasForeignKey("UnitMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Main.StoreItemBalanceDetails", b =>
                {
                    b.HasOne("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Main.StoreItem", "StoreItem")
                        .WithMany()
                        .HasForeignKey("StoreItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Main.StoreTransaction", "StoreTransaction")
                        .WithMany()
                        .HasForeignKey("StoreTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Main.StoreItemWithSN", b =>
                {
                    b.HasOne("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Main.StoreItem", "StoreItem")
                        .WithMany()
                        .HasForeignKey("StoreItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Main.StoreTransaction", "StoreTransaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Main.StoreTransaction", b =>
                {
                    b.HasOne("ERPv1.ERP.SalesModule.Model.Invoices", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceNum");

                    b.HasOne("ERPv1.ERP.PurchasesModule.Model.Purchase", "PurchaseDetails")
                        .WithMany()
                        .HasForeignKey("PurchaseId");

                    b.HasOne("ERPv1.ERP.CurrentAssetModules.Inventory.Model.Main.StoreItem", "StoreItem")
                        .WithMany()
                        .HasForeignKey("StoreItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentLiabilitiesModules.NotesPayableModule.Model.NotesPayable", b =>
                {
                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChart", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountNum");

                    b.HasOne("ERPv1.ERP.ERPSettings.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.CRM.Model.Contacts", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPv1.ERP.CurrentLiabilitiesModules.NotesPayableModule.Model.NotesPayableTransactionHistory", b =>
                {
                    b.HasOne("ERPv1.ERP.CurrentLiabilitiesModules.NotesPayableModule.Model.NotesPayable", "ChkDetails")
                        .WithMany()
                        .HasForeignKey("ChkNum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChart", b =>
                {
                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChartCounter", "AccType")
                        .WithMany()
                        .HasForeignKey("AccTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.ERPSettings.Model.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.ERPSettings.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.HistoricalBalance", b =>
                {
                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChart", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsAccNum");

                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.FiniacialPeriod", "FiniacialPeriod")
                        .WithMany()
                        .HasForeignKey("FinancialPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.JournalModeule.Model.JournalDetails", b =>
                {
                    b.HasOne("ERPv1.ERP.ERPSettings.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.JournalModeule.Model.Journal", "Trans")
                        .WithMany()
                        .HasForeignKey("TransId");
                });

            modelBuilder.Entity("ERPv1.ERP.PurchasesModule.Model.ExpenseItem", b =>
                {
                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChart", "AccountDetail")
                        .WithMany()
                        .HasForeignKey("AccNum");

                    b.HasOne("ERPv1.ERP.PurchasesModule.Model.ExpenseType", "ExpenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPv1.ERP.PurchasesModule.Model.ExpenseSummary", b =>
                {
                    b.HasOne("ERPv1.HR.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("ERPv1.ERP.ERPSettings.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.PurchasesModule.Model.ExpenseItem", "ExpenseItem")
                        .WithMany()
                        .HasForeignKey("ExpenseItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.CRM.Model.Contacts", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("ERPv1.ERP.PurchasesModule.Model.Purchase", b =>
                {
                    b.HasOne("ERPv1.ERP.ERPSettings.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("ERPv1.CRM.Model.Contacts", "SupplierDetails")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPv1.ERP.PurchasesModule.Model.SupplierTransaction", b =>
                {
                    b.HasOne("ERPv1.ERP.ERPSettings.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChart", "PaymentAccDetails")
                        .WithMany()
                        .HasForeignKey("PaymentAccNum");

                    b.HasOne("ERPv1.ERP.PurchasesModule.Model.Purchase", "PurchaseDetails")
                        .WithMany()
                        .HasForeignKey("PurchaseId");

                    b.HasOne("ERPv1.CRM.Model.Contacts", "SupplierDetails")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.JournalModeule.Model.Journal", "TransactionDetails")
                        .WithMany()
                        .HasForeignKey("TransId");
                });

            modelBuilder.Entity("ERPv1.ERP.SalesModule.Model.ClientTransaction", b =>
                {
                    b.HasOne("ERPv1.CRM.Model.Contacts", "ClientDetails")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.ERPSettings.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.SalesModule.Model.Invoices", "InvoiceDetails")
                        .WithMany()
                        .HasForeignKey("InvoiceNum");

                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChart", "PaymentAccDetails")
                        .WithMany()
                        .HasForeignKey("PaymentAccNum");

                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.JournalModeule.Model.Journal", "TransactionDetails")
                        .WithMany()
                        .HasForeignKey("TransId");
                });

            modelBuilder.Entity("ERPv1.ERP.SalesModule.Model.Invoices", b =>
                {
                    b.HasOne("ERPv1.CRM.Model.Contacts", "ContactDetails")
                        .WithMany()
                        .HasForeignKey("ContactDetailsId");

                    b.HasOne("ERPv1.ERP.ERPSettings.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPv1.HR.Model.Employee", b =>
                {
                    b.HasOne("ERPv1.HR.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPv1.HR.Model.SalaryDetails", b =>
                {
                    b.HasOne("ERPv1.HR.Model.SalaryBatch", "SalaryBatch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.HR.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
