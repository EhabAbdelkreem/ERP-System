// <auto-generated />
using System;
using ERPv1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ERPv1.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201005191325_UpdateFinancialPeriod")]
    partial class UpdateFinancialPeriod
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ERPv1.ERP.ERPSettings.Model.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Finance_Settings_Branch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Main"
                        });
                });

            modelBuilder.Entity("ERPv1.ERP.ERPSettings.Model.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencyAbbrev")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("CurrencyNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Finance_Settings_Currency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrencyAbbrev = "EGP",
                            CurrencyName = "Egyptain Pound",
                            CurrencyNameAr = "جنية مصر",
                            IsDefault = true,
                            Rate = 1m
                        },
                        new
                        {
                            Id = 2,
                            CurrencyAbbrev = "USD",
                            CurrencyName = "American Dollar",
                            CurrencyNameAr = "دولار أمريكي",
                            IsDefault = false,
                            Rate = 16.00m
                        });
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChart", b =>
                {
                    b.Property<string>("AccNum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("AccTypeId")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("AccountNameAr")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("AccountNature")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit");

                    b.Property<string>("ParentAcNum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("StartingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AccNum");

                    b.HasIndex("AccTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Finance_GL_AccountChart");

                    b.HasData(
                        new
                        {
                            AccNum = "1110000000",
                            AccTypeId = 1,
                            AccountName = "Buildings",
                            AccountNameAr = "مباني",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1120000000",
                            AccTypeId = 2,
                            AccountName = "Machines And Equipments",
                            AccountNameAr = "أجهزة و معدات",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1130000000",
                            AccTypeId = 3,
                            AccountName = "Furnitiures",
                            AccountNameAr = "أثاث",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1210000000",
                            AccTypeId = 4,
                            AccountName = "Safes",
                            AccountNameAr = "خزن",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1220000000",
                            AccTypeId = 5,
                            AccountName = "Banks",
                            AccountNameAr = "بنوك",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1230000000",
                            AccTypeId = 6,
                            AccountName = "Clients",
                            AccountNameAr = "عملاء",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1230000001",
                            AccTypeId = 6,
                            AccountName = "Clients",
                            AccountNameAr = "عملاء",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = false,
                            IsParent = true,
                            ParentAcNum = "1230000000",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1240000000",
                            AccTypeId = 7,
                            AccountName = "Checks",
                            AccountNameAr = "شيكات",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1240000001",
                            AccTypeId = 7,
                            AccountName = "Checks In Safe",
                            AccountNameAr = "شيكات في الخزنة",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = false,
                            ParentAcNum = "1240000000",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1240000002",
                            AccTypeId = 7,
                            AccountName = "Checks In Bank",
                            AccountNameAr = "شيكات في البنك",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = false,
                            ParentAcNum = "1240000000",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1240000003",
                            AccTypeId = 7,
                            AccountName = "Bounced Checks",
                            AccountNameAr = "شيكات مرتدة",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = false,
                            ParentAcNum = "1240000000",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1250000000",
                            AccTypeId = 8,
                            AccountName = "Store",
                            AccountNameAr = "مخزن",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1261000000",
                            AccTypeId = 9,
                            AccountName = "Custody",
                            AccountNameAr = "عهد",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1262000000",
                            AccTypeId = 10,
                            AccountName = "StaffAdvances",
                            AccountNameAr = "سلف",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1263000000",
                            AccTypeId = 11,
                            AccountName = "Suppliers Advances",
                            AccountNameAr = "دفعات مقدمة للموردين",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "1269000000",
                            AccTypeId = 12,
                            AccountName = "OtherCurrentAsset",
                            AccountNameAr = "أصول متداولة أخري",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2170000000",
                            AccTypeId = 13,
                            AccountName = "NotePayable",
                            AccountNameAr = "شيكات موردين",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2170000001",
                            AccTypeId = 13,
                            AccountName = "NotePayable",
                            AccountNameAr = "شيكات موردين",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = false,
                            IsParent = true,
                            ParentAcNum = "2170000000",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2210000000",
                            AccTypeId = 14,
                            AccountName = "Suppliers",
                            AccountNameAr = "موردين",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2220000000",
                            AccTypeId = 15,
                            AccountName = "Taxes",
                            AccountNameAr = "ضرائب",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2230000000",
                            AccTypeId = 16,
                            AccountName = "Creditors",
                            AccountNameAr = "دائنون",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2240000000",
                            AccTypeId = 17,
                            AccountName = "Accrued Expenses",
                            AccountNameAr = "مصروفات مستحقة",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2250000000",
                            AccTypeId = 18,
                            AccountName = "Advances Income",
                            AccountNameAr = "ايرادات مستحقة",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "2250000001",
                            AccTypeId = 18,
                            AccountName = "Advances Income",
                            AccountNameAr = "ايرادات مستحقة",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = false,
                            IsParent = true,
                            ParentAcNum = "2250000000",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "3110000000",
                            AccTypeId = 19,
                            AccountName = "Incomes",
                            AccountNameAr = "إيرادات",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "4111000000",
                            AccTypeId = 20,
                            AccountName = "Expenses",
                            AccountNameAr = "مصروفات",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "4112000000",
                            AccTypeId = 21,
                            AccountName = "Purchases",
                            AccountNameAr = "مشتريات",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "5110000000",
                            AccTypeId = 22,
                            AccountName = "Capital",
                            AccountNameAr = "رأس المال",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        },
                        new
                        {
                            AccNum = "5120000000",
                            AccTypeId = 23,
                            AccountName = "WithDrawls",
                            AccountNameAr = "مسحوبات",
                            AccountNature = 0,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            IsActive = true,
                            IsParent = true,
                            ParentAcNum = "",
                            StartingBalance = 0m
                        });
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChartCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountCategory")
                        .HasColumnType("int");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("BalanceSheet")
                        .HasColumnType("bit");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("IncomeStatement")
                        .HasColumnType("bit");

                    b.Property<string>("ParentAccNum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Finance_GL_AccountChartCounter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountCategory = 10,
                            AccountType = "Buildings",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1110000000"
                        },
                        new
                        {
                            Id = 2,
                            AccountCategory = 10,
                            AccountType = "Machines And Equipments",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1120000000"
                        },
                        new
                        {
                            Id = 3,
                            AccountCategory = 10,
                            AccountType = "Furnitiures",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1130000000"
                        },
                        new
                        {
                            Id = 4,
                            AccountCategory = 20,
                            AccountType = "Safe",
                            BalanceSheet = true,
                            Count = 1,
                            IncomeStatement = false,
                            ParentAccNum = "1210000000"
                        },
                        new
                        {
                            Id = 5,
                            AccountCategory = 20,
                            AccountType = "Bank",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1220000000"
                        },
                        new
                        {
                            Id = 6,
                            AccountCategory = 20,
                            AccountType = "Client",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1230000000"
                        },
                        new
                        {
                            Id = 7,
                            AccountCategory = 20,
                            AccountType = "Check",
                            BalanceSheet = true,
                            Count = 3,
                            IncomeStatement = false,
                            ParentAccNum = "1240000000"
                        },
                        new
                        {
                            Id = 8,
                            AccountCategory = 20,
                            AccountType = "Store",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1250000000"
                        },
                        new
                        {
                            Id = 9,
                            AccountCategory = 20,
                            AccountType = "Custody",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1261000000"
                        },
                        new
                        {
                            Id = 10,
                            AccountCategory = 20,
                            AccountType = "StaffAdvances",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1262000000"
                        },
                        new
                        {
                            Id = 11,
                            AccountCategory = 20,
                            AccountType = "SupplierAdvances",
                            BalanceSheet = false,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1263000000"
                        },
                        new
                        {
                            Id = 12,
                            AccountCategory = 20,
                            AccountType = "OtherCurrentAsset",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "1269000000"
                        },
                        new
                        {
                            Id = 13,
                            AccountCategory = 40,
                            AccountType = "NotePayable",
                            BalanceSheet = true,
                            Count = 1,
                            IncomeStatement = false,
                            ParentAccNum = "2170000000"
                        },
                        new
                        {
                            Id = 14,
                            AccountCategory = 40,
                            AccountType = "Suppliers",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "2210000000"
                        },
                        new
                        {
                            Id = 15,
                            AccountCategory = 40,
                            AccountType = "Taxes",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "2220000000"
                        },
                        new
                        {
                            Id = 16,
                            AccountCategory = 40,
                            AccountType = "Creditors",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "2230000000"
                        },
                        new
                        {
                            Id = 17,
                            AccountCategory = 40,
                            AccountType = "Accrued Expenses",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "2240000000"
                        },
                        new
                        {
                            Id = 18,
                            AccountCategory = 40,
                            AccountType = "Advances Income",
                            BalanceSheet = true,
                            Count = 1,
                            IncomeStatement = false,
                            ParentAccNum = "2250000000"
                        },
                        new
                        {
                            Id = 19,
                            AccountCategory = 60,
                            AccountType = "Income",
                            BalanceSheet = false,
                            Count = 0,
                            IncomeStatement = true,
                            ParentAccNum = "3110000000"
                        },
                        new
                        {
                            Id = 20,
                            AccountCategory = 70,
                            AccountType = "Expense",
                            BalanceSheet = false,
                            Count = 0,
                            IncomeStatement = true,
                            ParentAccNum = "4111000000"
                        },
                        new
                        {
                            Id = 21,
                            AccountCategory = 80,
                            AccountType = "Purchases",
                            BalanceSheet = false,
                            Count = 0,
                            IncomeStatement = true,
                            ParentAccNum = "4112000000"
                        },
                        new
                        {
                            Id = 22,
                            AccountCategory = 50,
                            AccountType = "Owners",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "5110000000"
                        },
                        new
                        {
                            Id = 23,
                            AccountCategory = 50,
                            AccountType = "OwnerWithdraw",
                            BalanceSheet = true,
                            Count = 0,
                            IncomeStatement = false,
                            ParentAccNum = "5120000000"
                        });
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.FiniacialPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Finance_GL_FiniacialPeriod");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            YearName = "2020-2021"
                        });
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.HistoricalBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AccountDetailsAccNum")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FinancialPeriodId")
                        .HasColumnType("int");

                    b.Property<decimal>("UsedRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsAccNum");

                    b.HasIndex("FinancialPeriodId");

                    b.ToTable("Finance_GL_HistoricalBalance");
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.Journal.Model.Journal", b =>
                {
                    b.Property<string>("TransId")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("DocName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EntryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SystemModule")
                        .HasColumnType("int");

                    b.Property<int>("TransCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("Date");

                    b.Property<string>("TransDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransId");

                    b.ToTable("Finance_GL_Journal");
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.Journal.Model.JournalDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccNum")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountLocal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<string>("TransId")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<decimal>("UsedRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TransId");

                    b.ToTable("Finance_GL_JournalDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChart", b =>
                {
                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChartCounter", "AccType")
                        .WithMany()
                        .HasForeignKey("AccTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.ERPSettings.Model.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.ERPSettings.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.HistoricalBalance", b =>
                {
                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.AccountChart", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsAccNum");

                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.AccountCharts.Model.FiniacialPeriod", "FiniacialPeriod")
                        .WithMany()
                        .HasForeignKey("FinancialPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPv1.ERP.GeneralLedgerModule.Journal.Model.JournalDetails", b =>
                {
                    b.HasOne("ERPv1.ERP.ERPSettings.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPv1.ERP.GeneralLedgerModule.Journal.Model.Journal", "Trans")
                        .WithMany()
                        .HasForeignKey("TransId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
